#
# Copyright (c) 2013, 2018 Oracle and/or its affiliates. All rights reserved.
#
# This program and the accompanying materials are made available under the
# terms of the Eclipse Public License v. 2.0, which is available at
# http://www.eclipse.org/legal/epl-2.0.
#
# This Source Code may also be made available under the following Secondary
# Licenses when the conditions for such availability set forth in the
# Eclipse Public License v. 2.0 are satisfied: GNU General Public License,
# version 2 with the GNU Classpath Exception, which is available at
# https://www.gnu.org/software/classpath/license.html.
#
# SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
#

#
# $Id$
#

####################################################################################
#                                                                   	           #
#   JavaTest Environment file for JMS Compatibility Test Suite                     #
#                                                                                  #
#   Environment specific properties in this file will likely	                   #
#   have to be modified prior to running the JMS TCK. Instructions                 #
#   for modifying these properties are contained in this file.	                   #
#                                                                                  #
####################################################################################

####################################################################################
# Properties to set prior to running the JMS TCK tests against a Standalone JMS 
# Resource Adapter. The JMS Resource Adapter requires deployment and configuration
# to a Java EE 7 platform environment before you can run the JMS TCK tests. For
# our purposes we use the Java EE 7 RI (GlassFish 4.0) as the platform environment.
#
# @jms.home		-- Install directory of Java EE 7 RI which is used to test
#			   a Standalone JMS Resource Adapter.
# @jms.classes		-- Classes of the JMS RI Implementation within the Java EE 7 RI
#			   needed to run and/or build the JMS TCK. This is hardcoded to
#			   the following:
#
#			   jms.classes=${glassfish.jars} 
#
# When testing a Standalone JMS Resource Adapter against the Java EE 7 RI the 
# following proprties need to be set:
#
# @jms.home		-- Set to install directory of Java EE 7 RI.

# @jms.classes		-- This is hardcoded to "${glassfish.jars}". This requires
#			   no change. See "glassfish.jars" property setting at bottom
#			   of ts.jte file.
#
# @impl.vi		-- This is hardcoded to "glassfish". This requires no change.
#
# @jmsra.rarfile 	-- Set to Standalone JMS Resource Adapter RAR file location
#
# @jmsra.jarfile 	-- Set to Standalone JMS Resource Adapter JAR file location
#
# @jmsra.name		-- Set to the name refering to your Standalone JMS Resource 
#			   Adapter
####################################################################################
jms.home=
jms.classes=${glassfish.jars}

####################################################################################
# The jars/classes for the TS harness/javatest and the test classes
# @ts.harness.classpath --  Classes required by javatest
# @ts.classpath         --  Classes used to build the CTS tests
# @ts.run.classpath     --  Classpath required by the vendor
#                           appclient container.
####################################################################################
ts.harness.classpath=${ts.home}/lib/javatest.jar${pathsep}${ts.home}/lib/tsharness.jar${pathsep}${ts.home}/lib/jmstck.jar${pathsep}${ant.home}/lib/ant.jar${pathsep}${ts.home}/lib/jaxb-api.jar${pathsep}${ts.home}/lib/jaxb-xjc.jar${pathsep}${ts.home}/lib/jaxb-libs.jar${pathsep}${ts.home}/lib/jaxb-impl.jar

ts.classpath=${jms.classes}${pathsep}${ts.home}/lib/tsharness.jar${pathsep}${ts.home}/lib/jmstck.jar

ts.run.classpath=${ts.home}/lib/tsharness.jar${pathsep}${ts.home}/lib/sigtest.jar${pathsep}${ts.home}/lib/jmstck.jar${pathsep}${ts.home}/classes${pathsep}${ts.home}/bin${pathsep}${jms.classes}

###############################################################################
# @tools.jar  should be set to the location of the tools.jar from the 
# installed jdk
###############################################################################
tools.jar=${jdk.home}/lib/tools.jar

#############################################################################
# @sigTestClasspath: This property must be set when running signature 
#                    tests.  This property should be set to a list of
#                    jar files and/or directories which contain your 
#                    Java EE and Java SE classes. Paths must be 
#                    separated by the appropriate path separator 
#                    (';' windows, ':' Unixes).
#############################################################################
sigTestClasspath=${jms.classes}${pathsep}${JAVA_HOME}/lib/rt.jar

############################################################################
# These properties are used by the harness.  "harness.log.port"
# specifies the port that server components use to send logging
# output back to JavaTest.  If the default port # is not available
# on the machine running JavaTest, then you can set it here.
#
# @harness.temp.directory directory location used by the
#                         harness to store temporary files
#
# @harness.log.port  the port the harness listens on for log mesages
#                    from remote clients
#
# @harness.log.traceflag  used to turn on/off verbose debugging output
#                         for the tests.
#
# @harness.log.delayseconds  Number of seconds to delay to allow
#                            reporting from remote clients to finish.
#
# @harness.executeMode  used to run the harness in the following modes
#                       of execution:  2 - run only
#
# @harness.socket.retry.count - denotes the number of time we should
#           attempt to create a server socket when intilizing a test
#           client. The socket is used for logging purposes.
############################################################################
harness.temp.directory=${ts.home}/tmp
harness.log.port=2001
harness.log.traceflag=false
harness.log.delayseconds=1 
harness.executeMode=2
harness.socket.retry.count=10
work.dir=/tmp/JTwork
report.dir=/tmp/JTreport
if.existing.work.report.dirs=auto

###########################################################################
# @tz - your local timezone. For valid values, consult your
#       Operating System documentation.
###########################################################################
tz=US/Eastern

##############################################################################
# @javatest.timeout.factor This property specifies the scale factor used by
# Javatest to adjust the time JavaTest will wait for a given test to
# complete before returning failure.  For instance if the default test timeout
# is 5 minutes, this value will be multiplied by 5 minutes to determine
# the total timeout delay.  Note: this value only works with Javatest's
# batch mode (runclient).  When using the Javatest GUI users must change
# this timeout factor in the GUI. Configure -> Edit Configuration -> View
# -> choose Standard Values -> select tab Execution ->  set Time Factor.
##############################################################################
javatest.timeout.factor=1.0

#######################################################################
#build level
#######################################################################
#1: compile only
#2: compile and build component archives (e.g., jar's, war's)
build.level=1

###############################################################
# @ts.display -- location to display CTS output on Unix
###############################################################
ts.display=:0.0

#######################################################################
# default deliverable class
#######################################################################
deliverable.class=com.sun.ts.lib.deliverable.jms.JMSDeliverable

#####################################################################
## This command allows the test clients to be run in
## the same JVM as JavaTest in this case.  This mode can be
## enabled by passing "-Dsame.jvm=true" to the runclient or gui
## targets.  NOTE: This option is only to be used for sanity
## checking and not when running the TCK for compatibility.
#####################################################################
command.testExecuteSameJVM=com.sun.ts.lib.harness.ExecuteTSTestSameJVMCmd \
        $testExecuteClass $testExecuteArgs

########################################################################
## Common environment for both ts_unix and ts_win32
########################################################################
command.testExecute=com.sun.ts.lib.harness.ExecTSTestCmd \
        CLASSPATH=${ts.run.classpath} \
        DISPLAY="${ts.display}" \
		HOME="${user.home}"  \
		windir=${windir} \
		SYSTEMROOT=${SYSTEMROOT} \
        ${JAVA_HOME}/bin/java \
		-Djava.security.policy="${bin.dir}/harness.policy" \
		-Djava.security.manager -Dgenericra.inAppClientContainer=true \
		-Ddeliverable.class=${deliverable.class} \
                -Djava.endorsed.dirs=${endorsed.dirs} \
        $testExecuteClass $testExecuteArgs

#########################################################################
## Environment for ts_unix
## The test execution commands inherit from common environment
## defined above: testExecute.
## If you need to override it, uncomment it in the following section.
#########################################################################
env.ts_unix.menu=true

########################################################################
## Environment for ts_win32
## The test execution commands inherit from common environment
## defined above: testExecute.
## If you need to override it, uncomment it in the following section.
########################################################################
env.ts_win32.menu=true

########################################################################
# This property is used by porting class to set JNDI name
########################################################################
porting.ts.jmsObjects.class.1=com.sun.ts.lib.implementation.sun.jms.SunRIJMSObjects

###############################################################
#These properties are needed for the JMS tests.
###############################################################
jms_timeout=5000
user=j2ee
password=j2ee

######################################################################
## Deliverables must set this property to the name of the deliverable
## specific library jar file (iff create.manifest.extension.entries
## is set to true)
######################################################################
tslib.name=jmstck

#########################################################################
# platform.mode is used by to specify runtime environment for testing
# which can be either jakartaEE or standalone. For JMS TCK this setting
# is standalone.
#
# platform.mode=standalone     Testing JMS TCK as Standalone environment
#########################################################################
platform.mode=standalone

##################################################################################
# JMS RI Implementation Property Settings for Vendor Implementation under test
#
# The TCK uses the JMS RI Implementation within the Java EE 7 RI for testing a
# Standalone JMS Resource Adapter.
#   - glassfish   (For the JMS RI Implementation within Java EE 7 RI)
#
# Here are the common properties that need to be defined for the common
# implementation functionality:
#
# @impl.vi    	-- This property must be set to the Vendor implementation under 
#		   test.
#
#		   This property is hardcoded to (impl.vi=glassfish) for the 
#		   (Java EE 7 RI). 
##################################################################################

impl.vi=glassfish

# ---------------------------------------------------------------------------------------
# ===========================================================================
# Standalone JMS Resource Adapter Configuration Properties for (Java EE 7 RI)
# ===========================================================================
#
# Property settings for ant config.vi/clean.vi tasks to configure, deploy, setup, 
# start, stop, undeploy a Standalone JMS Resource Adapter on (Java EE 7 RI) for 
# a JMS TCK run.
#
# For a Standalone JMS Resource Adapter implementation set the following properties
# below:
#
# jmsra.rarfile 	// JMS Resource Adapter RAR file location
# jmsra.jarfile 	// JMS Resource Adapter JAR file location
# jmsra.name 		// JMS Resource Adapter name
#
# The JMS TCK uses the JNDI CosNaming Provider as the JMS Object store for the JMS
# administered objects for the Java EE 7 RI.
#
# For a Standalone JMS Resource Adapter implementation set the "jms.home" property
# at top of this file to the location where the (Java EE 7 RI) is installed. Set
# "jmsra.rarfile" to the RAR file that contains the Standalone JMS Resource Adapter
# implementation. Set "jmsra.jarfile" to the JAR file that contains the Standalone
# JMS Resource Adapter implemenation classes. Set "jmsra.name" to the name that 
# refers to Standalone JMS Resource Adapter implementation.
#
# We have an ant script called config.vi.xml that handles configuration for the
# Standlone Generic JMS Resource Adapter (GenericJMSRA) to the Java EE 7 RI. To 
# test any, other Standalone JMS Reesource Adapter you will need to write your 
# own config.vi script.
# ---------------------------------------------------------------------------------------
# Edit the following properties
jmsra.rarfile=
jmsra.jarfile=
jmsra.name=

# These properties require no change
glassfish.home=${jms.home}
imq.bin.dir=${glassfish.home}/../mq/bin
imq.lib.dir=${glassfish.home}/../mq/lib
glassfish.jars=${glassfish.home}/lib/gf-client.jar${pathsep}${imq.lib.dir}/imq.jar${pathsep}${imq.lib.dir}/jms.jar${pathsep}${bin.dir}/xml/impl/glassfish${pathsep}${jmsra.jarfile}
glassfish.instance.home=${glassfish.home}/domains/domain1
glassfish.admin.host=localhost
glassfish.admin.port=4848
glassfish.webServerPort=8080
glassfish.orb.port=3700
glassfish.admin.user=admin
glassfish.admin.pass=
glassfish.master.pass=changeit
glassfish.server.instance=server
glassfish.domain.name=domain1
jmsServer=imqbroker
